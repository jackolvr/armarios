import streamlit as st
import pandas as pd
import os
import datetime
import io
import matplotlib.pyplot as plt

# Configura칞칚o da p치gina
st.set_page_config(
    page_title="Controle de Arm치rios",
    page_icon="游댏",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fun칞칚o para criar um link de download para um DataFrame
def gerar_link_download_excel(df, nome_arquivo="dados"):
    # Criar um buffer de bytes para o arquivo Excel
    output = io.BytesIO()
    # Escrever o DataFrame para o buffer como um arquivo Excel
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Dados')
    # Obter os bytes do buffer
    dados_excel = output.getvalue()
    # Criar o link de download
    st.download_button(
        label=f"游닌 Baixar dados em Excel",
        data=dados_excel,
        file_name=f"{nome_arquivo}_{datetime.datetime.now().strftime('%d%m%Y_%H%M%S')}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

# Fun칞칚o para criar um gr치fico de pizza da ocupa칞칚o dos arm치rios
def criar_grafico_ocupacao(ocupados, disponiveis):
    # Dados para o gr치fico de pizza
    labels = ['Ocupados', 'Dispon칤veis']
    sizes = [ocupados, disponiveis]
    colors = ['#FF9966', '#66B2FF']  # Laranja claro e azul claro

    # Criar o gr치fico de pizza
    fig, ax = plt.subplots(figsize=(4, 2))
    wedges, texts, autotexts = ax.pie(
        sizes,
        labels=labels,
        colors=colors,
        autopct='%1.1f%%',
        startangle=55,
        shadow=False,
        textprops={'fontsize': 6, 'weight': 'bold'}
    )

    # Personalizar cores dos textos
    for text in texts:
        text.set_color('#333333')
    for autotext in autotexts:
        autotext.set_color('white')
        autotext.set_fontsize(6)
        autotext.set_weight('bold')

    ax.axis('equal')  # Garante que o gr치fico seja um c칤rculo
    #plt.title('Ocupa칞칚o de Arm치rios', fontsize=16, pad=20)
    plt.tight_layout()

    return fig

# Aplica o CSS customizado do arquivo styles.css
try:
    with open("styles.css") as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
except Exception as e:
    st.warning(f"N칚o foi poss칤vel carregar o CSS customizado: {e}")

# Fun칞칚o para criar um cabe칞alho estilizado
def header_estilizado(titulo, icone="游댏"):
    st.markdown(f"<h1 style='text-align: center; color: #1E88E5;'>{icone} {titulo}</h1>", unsafe_allow_html=True)
    st.markdown("---")

# T칤tulo do aplicativo
header_estilizado("Sistema de Controle de Arm치rios")

# Fun칞칚o para gerar um ID 칰nico para cada arm치rio
def gerar_id_unico(numero, localizacao):
    # Remove espa칞os e caracteres especiais da localiza칞칚o
    loc_formatada = ''.join(e for e in localizacao if e.isalnum()).upper()
    # Cria um ID combinando a localiza칞칚o e o n칰mero
    return f"{loc_formatada}-{numero:04d}"

# Fun칞칚o para carregar os dados dos arm치rios da planilha Excel
def carregar_dados_armarios():
    try:
        # Tente carregar a planilha Excel com as informa칞칫es dos arm치rios
        df_info = pd.read_excel('armarios.xlsx')
        return df_info
    except Exception as e:
        st.error(f"Erro ao carregar a planilha de arm치rios: {e}")
        return None

# Fun칞칚o para carregar os registros existentes
def carregar_registros():
    if os.path.exists('registros_armarios.csv'):
        df = pd.read_csv('registros_armarios.csv')
        # Converte a coluna 'numero' para inteiro se n칚o for nulo
        if 'numero' in df.columns:
            df['numero'] = pd.to_numeric(df['numero'], errors='coerce').fillna(0).astype(int)
        return df
    else:
        # Se o arquivo n칚o existir, cria um DataFrame vazio com as colunas necess치rias
        return pd.DataFrame(columns=['id_unico', 'numero', 'localizacao', 'nome', 'turma', 'status', 'data'])

# Fun칞칚o para salvar os registros
def salvar_registros(df):
    df.to_csv('registros_armarios.csv', index=False)

# Fun칞칚o para inicializar os registros com base nas informa칞칫es dos arm치rios
def inicializar_registros(df_info):
    registros = carregar_registros()

    # Verifica se o arquivo de registros j치 tem a coluna id_unico
    if 'id_unico' not in registros.columns:
        # Se o arquivo existir mas n칚o tiver a coluna id_unico, adiciona a coluna
        if len(registros) > 0:
            registros['id_unico'] = registros.apply(lambda row: gerar_id_unico(row['numero'], row['localizacao']), axis=1)
            salvar_registros(registros)
            return registros

    # Se o arquivo de registros estiver vazio (apenas cabe칞alho), inicializa com os arm치rios dispon칤veis
    if len(registros) == 0:
        novos_registros = []

        # Para cada linha na planilha de informa칞칫es
        for _, row in df_info.iterrows():
            localizacao = row['Localiza칞칚o']
            inicio = int(row['In칤cio'])
            fim = int(row['Fim'])

            # Cria um registro para cada arm치rio no intervalo
            for numero in range(inicio, fim + 1):
                id_unico = gerar_id_unico(numero, localizacao)
                novos_registros.append({
                    'id_unico': id_unico,
                    'numero': numero,
                    'localizacao': localizacao,
                    'nome': '',
                    'turma': '',
                    'status': 'Dispon칤vel',
                    'data': ''
                })

        # Cria um novo DataFrame com os registros e salva
        registros = pd.DataFrame(novos_registros)
        salvar_registros(registros)

    return registros

# Carrega as informa칞칫es dos arm치rios
df_info_armarios = carregar_dados_armarios()

# Se conseguiu carregar as informa칞칫es, inicializa os registros
if df_info_armarios is not None:
    df_registros = inicializar_registros(df_info_armarios)

    # Sidebar para navega칞칚o
    st.sidebar.title("Navega칞칚o")
    opcao = st.sidebar.radio(
        "Selecione uma op칞칚o:",
        ["Vis칚o Geral", "Alocar Arm치rio", "Liberar Arm치rio", "Pesquisar"]
    )

    # Vis칚o Geral
    if opcao == "Vis칚o Geral":
        st.header("Vis칚o Geral dos Arm치rios")

        # Estat칤sticas
        total_armarios = len(df_registros)
        ocupados = len(df_registros[df_registros['status'] == 'Ocupado'])
        disponiveis = total_armarios - ocupados

        # Adicionar gr치fico de pizza logo ap칩s o cabe칞alho
        fig = criar_grafico_ocupacao(ocupados, disponiveis)
        st.pyplot(fig)

        # M칠tricas em cards
        col1, col2, col3 = st.columns(3)
        col1.metric("Total de Arm치rios", total_armarios)
        col2.metric("Arm치rios Ocupados", ocupados)
        col3.metric("Arm치rios Dispon칤veis", disponiveis)

        # Filtros
        st.subheader("Filtros")
        col1, col2 = st.columns(2)
        with col1:
            filtro_status = st.selectbox(
                "Status",
                ["Todos", "Dispon칤vel", "Ocupado"]
            )
        with col2:
            localizacoes = ["Todas"] + df_registros['localizacao'].unique().tolist()
            filtro_localizacao = st.selectbox("Localiza칞칚o", localizacoes)

        # Aplicar filtros
        df_filtrado = df_registros.copy()
        if filtro_status != "Todos":
            df_filtrado = df_filtrado[df_filtrado['status'] == filtro_status]
        if filtro_localizacao != "Todas":
            df_filtrado = df_filtrado[df_filtrado['localizacao'] == filtro_localizacao]

        # Exibir tabela filtrada sem o id_unico e sem 칤ndice
        colunas_exibir = [col for col in df_filtrado.columns if col != 'id_unico']
        st.dataframe(df_filtrado[colunas_exibir], hide_index=True)

        # Adicionar link para download dos dados filtrados
        if len(df_filtrado) > 0:
            nome_arquivo = "armarios_visao_geral"
            if filtro_status != "Todos":
                nome_arquivo += f"_{filtro_status.lower()}"
            if filtro_localizacao != "Todas":
                nome_arquivo += f"_{filtro_localizacao.replace(' ', '_').lower()}"

            gerar_link_download_excel(df_filtrado[colunas_exibir], nome_arquivo)

    # Alocar Arm치rio
    elif opcao == "Alocar Arm치rio":
        st.header("Alocar Arm치rio")

        # Filtros para encontrar arm치rios dispon칤veis
        localizacoes = ["Todas"] + df_registros['localizacao'].unique().tolist()
        filtro_localizacao = st.selectbox("Localiza칞칚o", localizacoes)

        # Filtrar arm치rios dispon칤veis
        df_disponiveis = df_registros[df_registros['status'] == 'Dispon칤vel']
        if filtro_localizacao != "Todas":
            df_disponiveis = df_disponiveis[df_disponiveis['localizacao'] == filtro_localizacao]

        if len(df_disponiveis) > 0:
            # Formul치rio para aloca칞칚o
            with st.form("form_alocacao"):
                st.subheader("Dados do Aluno")

                # Selecionar arm치rio dispon칤vel - sem mostrar o ID 칰nico na interface
                opcoes_armarios_display = [f"{row['numero']} - {row['localizacao']}" for _, row in df_disponiveis.iterrows()]
                # Dicion치rio para mapear a op칞칚o exibida para o ID 칰nico
                mapa_opcoes_para_id = {f"{row['numero']} - {row['localizacao']}": row['id_unico'] for _, row in df_disponiveis.iterrows()}

                armario_selecionado_display = st.selectbox("Selecione o Arm치rio", opcoes_armarios_display)

                # Obter o ID 칰nico do arm치rio selecionado usando o mapeamento
                id_unico_selecionado = mapa_opcoes_para_id[armario_selecionado_display]

                # Dados do aluno
                nome_aluno = st.text_input("Nome do Aluno")
                turma_aluno = st.text_input("Turma")

                # Bot칚o de submiss칚o
                submitted = st.form_submit_button("Alocar Arm치rio")

                if submitted:
                    if nome_aluno and turma_aluno:
                        # Converter dados para UPPER CASE
                        nome_aluno = nome_aluno.upper()
                        turma_aluno = turma_aluno.upper()

                        # Atualiza o registro
                        idx = df_registros[df_registros['id_unico'] == id_unico_selecionado].index[0]
                        df_registros.at[idx, 'nome'] = nome_aluno
                        df_registros.at[idx, 'turma'] = turma_aluno
                        df_registros.at[idx, 'status'] = 'Ocupado'
                        df_registros.at[idx, 'data'] = datetime.datetime.now().strftime("%d-%m-%Y")

                        # Salva os registros atualizados
                        salvar_registros(df_registros)

                        st.success(f"Arm치rio {armario_selecionado_display} alocado com sucesso para {nome_aluno}!")
                    else:
                        st.error("Por favor, preencha todos os campos.")
        else:
            st.warning("N칚o h치 arm치rios dispon칤veis com os filtros selecionados.")

    # Liberar Arm치rio
    elif opcao == "Liberar Arm치rio":
        st.header("Liberar Arm치rio")

        # Filtrar apenas arm치rios ocupados
        df_ocupados = df_registros[df_registros['status'] == 'Ocupado']

        if len(df_ocupados) > 0:
            # Op칞칫es para pesquisar o arm치rio a ser liberado
            opcao_pesquisa = st.radio(
                "Pesquisar por:",
                ["N칰mero do Arm치rio", "Nome do Aluno"]
            )

            if opcao_pesquisa == "N칰mero do Arm치rio":
                # Cria op칞칫es de sele칞칚o sem mostrar o ID 칰nico
                opcoes_armarios_display = [f"{row['numero']} - {row['localizacao']}" for _, row in df_ocupados.iterrows()]
                # Dicion치rio para mapear a op칞칚o exibida para o ID 칰nico
                mapa_opcoes_para_id = {f"{row['numero']} - {row['localizacao']}": row['id_unico'] for _, row in df_ocupados.iterrows()}

                armario_selecionado_display = st.selectbox("Selecione o Arm치rio", opcoes_armarios_display)

                # Obter o ID 칰nico do arm치rio selecionado usando o mapeamento
                id_unico_selecionado = mapa_opcoes_para_id[armario_selecionado_display]

                # Exibe informa칞칫es do arm치rio selecionado
                armario_info = df_ocupados[df_ocupados['id_unico'] == id_unico_selecionado].iloc[0]
                st.info(f"Arm치rio {armario_info['numero']} - Localiza칞칚o: {armario_info['localizacao']}")
                st.info(f"Ocupado por: {armario_info['nome']} - Turma: {armario_info['turma']}")

                if st.button("Liberar este Arm치rio"):
                    # Atualiza o registro
                    idx = df_registros[df_registros['id_unico'] == id_unico_selecionado].index[0]
                    df_registros.at[idx, 'nome'] = ''
                    df_registros.at[idx, 'turma'] = ''
                    df_registros.at[idx, 'status'] = 'Dispon칤vel'
                    df_registros.at[idx, 'data'] = ''

                    # Salva os registros atualizados
                    salvar_registros(df_registros)

                    st.success(f"Arm치rio {armario_selecionado_display} liberado com sucesso!")

            else:  # Pesquisa por nome
                nome_pesquisa = st.text_input("Digite o nome do aluno")

                if nome_pesquisa:
                    # Converter para UPPER CASE para pesquisa
                    nome_pesquisa = nome_pesquisa.upper()

                    # Filtra por nome (case insensitive e parcial)
                    resultados = df_ocupados[df_ocupados['nome'].str.contains(nome_pesquisa, case=False)]

                    if len(resultados) > 0:
                        st.subheader("Resultados encontrados:")
                        # Exibir resultados sem mostrar o ID 칰nico
                        colunas_exibir = [col for col in resultados.columns if col != 'id_unico']
                        st.dataframe(resultados[colunas_exibir], hide_index=True)

                        # Seleciona o arm치rio a ser liberado sem mostrar o ID 칰nico
                        opcoes_armarios_display = [f"{row['numero']} - {row['localizacao']}" for _, row in resultados.iterrows()]
                        # Dicion치rio para mapear a op칞칚o exibida para o ID 칰nico
                        mapa_opcoes_para_id = {f"{row['numero']} - {row['localizacao']}": row['id_unico'] for _, row in resultados.iterrows()}

                        armario_selecionado_display = st.selectbox("Selecione o arm치rio para liberar", opcoes_armarios_display)

                        # Obter o ID 칰nico do arm치rio selecionado usando o mapeamento
                        id_unico_selecionado = mapa_opcoes_para_id[armario_selecionado_display]

                        if st.button("Liberar Arm치rio Selecionado"):
                            # Atualiza o registro
                            idx = df_registros[df_registros['id_unico'] == id_unico_selecionado].index[0]
                            df_registros.at[idx, 'nome'] = ''
                            df_registros.at[idx, 'turma'] = ''
                            df_registros.at[idx, 'status'] = 'Dispon칤vel'
                            df_registros.at[idx, 'data'] = ''

                            # Salva os registros atualizados
                            salvar_registros(df_registros)

                            st.success(f"Arm치rio {armario_selecionado_display} liberado com sucesso!")
                    else:
                        st.warning(f"Nenhum aluno encontrado com o nome '{nome_pesquisa}'.")
        else:
            st.info("N칚o h치 arm치rios ocupados no momento.")

    # Pesquisar
    elif opcao == "Pesquisar":
        st.header("Pesquisar Arm치rios")

        # Op칞칫es de pesquisa
        opcao_pesquisa = st.radio(
            "Pesquisar por:",
            ["N칰mero do Arm치rio", "Nome do Aluno", "Turma"]
        )

        if opcao_pesquisa == "N칰mero do Arm치rio":
            numero_pesquisa = st.number_input("Digite o n칰mero do arm치rio", min_value=1, step=1)

            # Bot칚o de pesquisa sempre vis칤vel
            if st.button("Pesquisar"):
                # Filtrar apenas arm치rios ocupados com o n칰mero especificado
                resultado = df_registros[(df_registros['numero'] == numero_pesquisa) &
                                        (df_registros['status'] == 'Ocupado')]

                if len(resultado) > 0:
                    st.subheader("Resultados encontrados:")
                    # Exibir resultados sem o ID 칰nico e sem 칤ndice
                    colunas_exibir = [col for col in resultado.columns if col != 'id_unico']
                    st.dataframe(resultado[colunas_exibir], hide_index=True)

                    # Adicionar link para download dos resultados
                    gerar_link_download_excel(resultado[colunas_exibir], f"armarios_numero_{numero_pesquisa}")

                    # Se houver mais de um arm치rio com o mesmo n칰mero, mostra uma mensagem
                    if len(resultado) > 1:
                        st.info(f"Foram encontrados {len(resultado)} arm치rios ocupados com o n칰mero {numero_pesquisa} em diferentes localiza칞칫es.")
                else:
                    st.warning(f"Nenhum arm치rio ocupado com o n칰mero {numero_pesquisa} foi encontrado.")

        elif opcao_pesquisa == "Nome do Aluno":
            # Campo de entrada para o nome do aluno
            nome_pesquisa = st.text_input("Digite o nome do aluno")

            # Bot칚o de pesquisa sempre vis칤vel, independente do preenchimento do campo
            botao_pesquisar = st.button("Pesquisar")

            # Executa a pesquisa quando o bot칚o for clicado e houver texto no campo
            if botao_pesquisar:
                if nome_pesquisa:
                    # Converter para UPPER CASE para pesquisa
                    nome_pesquisa = nome_pesquisa.upper()

                    resultados = df_registros[df_registros['nome'].fillna('').str.contains(nome_pesquisa, case=False)]

                    if len(resultados) > 0:
                        st.subheader("Resultados encontrados:")
                        # Exibir resultados sem o ID 칰nico e sem 칤ndice
                        colunas_exibir = [col for col in resultados.columns if col != 'id_unico']
                        st.dataframe(resultados[colunas_exibir], hide_index=True)

                        # Adicionar link para download dos resultados
                        nome_arquivo = f"armarios_aluno_{nome_pesquisa.replace(' ', '_').lower()}"
                        gerar_link_download_excel(resultados[colunas_exibir], nome_arquivo)
                    else:
                        st.warning(f"Nenhum aluno encontrado com o nome '{nome_pesquisa}'.")
                else:
                    st.warning("Por favor, digite um nome para pesquisar.")

        else:  # Pesquisa por turma
            # Campo de entrada para a turma
            turma_pesquisa = st.text_input("Digite a turma")

            # Bot칚o de pesquisa sempre vis칤vel, independente do preenchimento do campo
            botao_pesquisar = st.button("Pesquisar")

            # Executa a pesquisa quando o bot칚o for clicado e houver texto no campo
            if botao_pesquisar:
                if turma_pesquisa:
                    # Converter para UPPER CASE para pesquisa
                    turma_pesquisa = turma_pesquisa.upper()

                    resultados = df_registros[df_registros['turma'].fillna('').str.contains(turma_pesquisa, case=False)]

                    if len(resultados) > 0:
                        st.subheader("Resultados encontrados:")
                        # Exibir resultados sem o ID 칰nico e sem 칤ndice
                        colunas_exibir = [col for col in resultados.columns if col != 'id_unico']
                        st.dataframe(resultados[colunas_exibir], hide_index=True)

                        # Adicionar link para download dos resultados
                        nome_arquivo = f"armarios_turma_{turma_pesquisa.replace(' ', '_').lower()}"
                        gerar_link_download_excel(resultados[colunas_exibir], nome_arquivo)
                    else:
                        st.warning(f"Nenhum aluno encontrado na turma '{turma_pesquisa}'.")
                else:
                    st.warning("Por favor, digite uma turma para pesquisar.")
else:
    st.error("N칚o foi poss칤vel carregar as informa칞칫es dos arm치rios. Verifique se o arquivo 'armarios.xlsx' existe e est치 no formato correto.")

    # Exibe o formato esperado da planilha
    st.info("""
    O arquivo 'armarios.xlsx' deve conter as seguintes colunas:
    - Localiza칞칚o: local onde os arm치rios est칚o (ex: Bloco A, Andar 2, etc)
    - In칤cio: n칰mero do primeiro arm치rio da faixa
    - Fim: n칰mero do 칰ltimo arm치rio da faixa

    Exemplo:
    | Localiza칞칚o | In칤cio | Fim |
    |----|----|----|
    | Bloco A    | 1    | 50  |
    | Bloco B    | 51    | 100 |
    """)